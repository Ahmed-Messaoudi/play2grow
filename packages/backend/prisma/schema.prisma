generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  keycloakId String   @unique
  email      String   @unique
  firstName  String?
  lastName   String?
  role       Role
  createdAt  DateTime @default(now())

  // New relation fields
  parentId String? // ðŸ‘ˆ A child will have this set
  parent   User?      @relation("ParentChild", fields: [parentId], references: [id])
  children User[]     @relation("ParentChild") // ðŸ‘ˆ A parent will have multiple children
  progress Progress[] @relation("UserProgress") // ðŸ‘ˆ Child â†’ Progress

  notifications Notification[]
  Child         Child[]
}

model Child {
  id        Int      @id @default(autoincrement())
  name      String
  age       Int
  parentId  String
  parent    User     @relation(fields: [parentId], references: [id])
  createdAt DateTime @default(now())
}

enum Role {
  parent
  child
}

model Progress {
  id      Int    @id @default(autoincrement())
  childId String // ðŸ‘ˆ Must match `User.id` type (String or Int)
  child   User   @relation("UserProgress", fields: [childId], references: [id])

  level     Int
  score     Int
  completed Boolean  @default(false)
  gameType  String
  timeTaken Int
  createdAt DateTime @default(now())
}

model Quiz {
  id        Int        @id @default(autoincrement())
  title     String
  level     Int        @unique
  questions Question[]
  createdAt DateTime   @default(now())
}

model Question {
  id        Int          @id @default(autoincrement())
  quizId    Int
  quiz      Quiz         @relation(fields: [quizId], references: [id])
  text      String
  type      QuestionType
  options   Option[]
  createdAt DateTime     @default(now())
}

model Option {
  id         Int      @id @default(autoincrement())
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])
  text       String?
  imageUrl   String?
  isCorrect  Boolean
}

enum QuestionType {
  TEXT
  IMAGE
  COLOR
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}
